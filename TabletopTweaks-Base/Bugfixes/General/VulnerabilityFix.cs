using HarmonyLib;
using Kingmaker.RuleSystem.Rules.Damage;
using Kingmaker.UnitLogic.FactLogic;
using System;

namespace TabletopTweaks.Base.Bugfixes.General {
    internal class VulnerabilityFix {
        [HarmonyPatch(typeof(AddDamageTypeVulnerability), nameof(AddDamageTypeVulnerability.OnEventAboutToTrigger), new Type[]{
            typeof(RuleCalculateDamage)
        })]
        static class AddDamageTypeVulnerability_BitFlag_Patch {
            static void Postfix(AddDamageTypeVulnerability __instance, RuleCalculateDamage evt) {
                if (Main.TTTContext.Fixes.BaseFixes.IsDisabled("DamageVulnerability")) { return; }
                if (__instance.PhyscicalForm) {
                    foreach (BaseDamage baseDamage in evt.DamageBundle) {
                        PhysicalDamage physicalDamage = baseDamage as PhysicalDamage;
                        if (physicalDamage != null && (physicalDamage.Form & __instance.FormType) > 0) {
                            physicalDamage.Vulnerability = 1.5f;
                        }
                    }
                }
            }
        }
    }
}
